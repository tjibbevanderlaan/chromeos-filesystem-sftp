# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# GNU Makefile based on shared rules provided by the Native Client SDK.
# See README.Makefiles for more details.

VALID_TOOLCHAINS := clang-newlib

NACL_SDK_ROOT ?= $(abspath $(CURDIR)/../..)
OUTBASE = ..

include $(NACL_SDK_ROOT)/tools/common.mk

TARGET = sftp

LIBS = ssh2 crypto nacl_io ppapi_cpp ppapi pthread

# CFLAGS = -Wall -std=c++0x
CFLAGS = -Wall -std=gnu++11
SOURCES = communication_exception.cc \
          abstract_command.cc \
          read_directory_command.cc \
          get_metadata_command.cc \
          read_file_command.cc \
          make_directory_command.cc \
          delete_entry_command.cc \
          rename_entry_command.cc \
          create_file_command.cc \
          write_file_command.cc \
          truncate_file_command.cc \
          sftp_thread.cc \
          sftp.cc

# Build rules generated by macros from common.mk:

$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

# The PNaCl workflow uses both an unstripped and finalized/stripped binary.
# On NaCl, only produce a stripped binary for Release configs (not Debug).
ifneq (,$(or $(findstring pnacl,$(TOOLCHAIN)),$(findstring Release,$(CONFIG))))
  ARCHES = x86_64 arm
  $(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
  $(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
  ARCHES = x86_32
  LDFLAGS = "-L$(NACL_SDK_ROOT)/toolchain/mac_pnacl/i686-nacl/usr/lib"
  $(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
  $(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
  ARCHES = x86_64 arm
  $(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
  ARCHES = x86_32
  LDFLAGS = "-L$(NACL_SDK_ROOT)/toolchain/mac_pnacl/i686-nacl/usr/lib"
  $(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))
